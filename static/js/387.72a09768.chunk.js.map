{"version":3,"file":"static/js/387.72a09768.chunk.js","mappings":"mSAEaA,EAAOC,EAAAA,GAAAA,GAAH,mHAQJC,EAAOD,EAAAA,GAAAA,GAAH,mEAIJE,EAAQF,EAAAA,GAAAA,IAAH,0DAKLG,EAAYH,EAAAA,GAAAA,IAAH,qIAOTI,EAAOJ,EAAAA,GAAAA,EAAH,qD,SC+BjB,EAnDa,WACX,OAAoCK,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACRC,EAASH,EACV,GAAE,CAACA,IAEJ,IAAMG,EAAQ,mCAAG,WAAMH,GAAN,mGAEcI,EAAAA,EAAAA,IAAaJ,GAF3B,UAEPK,EAFO,OAUW,KANlBC,EAAWD,EAAaE,KAAKC,KACjC,YAEE,MADiB,CAAEC,UADkB,EAApCA,UAC6BC,KADO,EAAzBA,KACwBC,aADC,EAAnBA,aAGnB,KAEUC,OAVA,uBAWXC,EAAAA,OAAAA,QAAe,qDAXJ,0BAcbd,EAAcO,GAdD,kDAgBbO,EAAAA,OAAAA,QAAe,2CAhBF,0DAAH,sDAoBd,OACE,SAACtB,EAAD,UACGO,EAAWU,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAApB,OACd,UAAClB,EAAD,YACE,SAACC,EAAD,CACEoB,IACEH,EAAY,yCAC0BA,GAClC,+EAENI,IAAKL,EACLM,MAAM,SAER,UAACrB,EAAD,YACE,SAACC,EAAD,UAAOc,KACP,UAACd,EAAD,yBAAkBa,UAZXC,EADG,KAmBrB,C,kMCrDKO,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAW,mCAAG,2GAAOC,EAAP,+BAAkB,GAAIC,EAAtB,+BAAoC,GAApC,kBAEOH,EAAAA,GAAAA,IAAA,UAClBE,EADkB,oBACEH,EADF,YACaI,IAHpB,cAEVC,EAFU,yBAKTA,EAASC,MALA,gCAOhB,IAAIC,MAAM,aAPM,yDAAH,qDAWJC,EAAc,WAEzB,OAAON,EADU,sBAElB,EAEYO,EAAiB,SAAAC,GAC5B,IACMN,EAAW,iBAAaM,GAC9B,OAAOR,EAFO,eAEeE,EAC9B,EAEYO,EAAkB,SAAA5B,GAC7B,IAAMoB,EAAQ,gBAAYpB,GAC1B,OAAOmB,EAAYC,EACpB,EAEYhB,EAAe,SAAAJ,GAC1B,IAAMoB,EAAQ,gBAAYpB,EAAZ,YACd,OAAOmB,EAAYC,EACpB,EAEYS,EAAkB,SAAA7B,GAC7B,IAAMoB,EAAQ,gBAAYpB,EAAZ,YACd,OAAOmB,EAAYC,EACpB,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n\nlist-style: none;\ndisplay: flex;\njustify-content: center;\nflex-wrap: wrap;\ngap: 20px;`\n\nexport const Item = styled.li`\nmax-width: 250px;\nborder: 1px dotted grey;`\n\nexport const Image = styled.img`\nwidth: 100%;\nobject-fit: cover;\n`\n\nexport const CardThumb = styled.div`\nheight: 100px;\nborder-top: 1px dotted grey;\npadding: 5px;\ntext-align: center;\nbackground-color: orangered`\n\nexport const Text = styled.p`\nwidth: 100%;\ncolor: white;\n`","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { getMovieCast } from '../../services/Api';\nimport { List, Item, CardThumb, Text, Image } from './Cast.styled';\n\nconst Cast = () => {\n  const [actorsList, setActorsList] = useState([]);\n  const { movieId } = useParams();\n  \n  useEffect(() => {\n    loadCast(movieId);\n  }, [movieId]);\n\n  const loadCast = async movieId => {\n    try {\n      const responseData = await getMovieCast(movieId);\n      \n      const castList = responseData.cast.map(\n        ({ character, name, profile_path }) => {\n          const castItem = { character, name, profile_path };\n          return castItem;\n        }\n      );\n      if (castList.length === 0) {\n        Notify.failure('Sorry, there are no cast information by this film');\n        return;\n      }\n      setActorsList(castList);\n    } catch (error) {\n      Notify.failure('Something went wrong. Please try again.');\n    }\n  };\n\n  return (\n    <List>\n      {actorsList.map(({ character, name, profile_path }) => (\n        <Item key={name}>\n          <Image\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : 'https://upload.wikimedia.org/wikipedia/commons/f/fc/No_picture_available.png'\n            }\n            alt={name}\n            width=\"300\"\n          ></Image>\n          <CardThumb>\n            <Text>{name}</Text>\n            <Text>Character: {character}</Text>\n          </CardThumb>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '8d195799489102b1191d845f2ff9f57d';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst fetchMovies = async (pathName = '', queryString = '') => {\n  try {\n    const response = await axios.get(\n      `${pathName}?api_key=${API_KEY}&${queryString}`\n    );\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n};\n\nexport const getTrending = () => {\n  const pathName = '/trending/movie/day';\n  return fetchMovies(pathName);\n};\n\nexport const getMovieSearch = query => {\n  const pathName = `search/movie`;\n  const queryString = `&query=${query}`;\n  return fetchMovies(pathName, queryString);\n};\n\nexport const getMovieDetails = movieId => {\n  const pathName = `movie/${movieId}`;\n  return fetchMovies(pathName);\n};\n\nexport const getMovieCast = movieId => {\n  const pathName = `movie/${movieId}/credits`;\n  return fetchMovies(pathName);\n};\n\nexport const getMovieReviews = movieId => {\n  const pathName = `movie/${movieId}/reviews`;\n  return fetchMovies(pathName);\n};\n"],"names":["List","styled","Item","Image","CardThumb","Text","useState","actorsList","setActorsList","movieId","useParams","useEffect","loadCast","getMovieCast","responseData","castList","cast","map","character","name","profile_path","length","Notify","src","alt","width","API_KEY","axios","fetchMovies","pathName","queryString","response","data","Error","getTrending","getMovieSearch","query","getMovieDetails","getMovieReviews"],"sourceRoot":""}