{"version":3,"file":"static/js/439.9278c297.chunk.js","mappings":"qTAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,8NAcVE,EAAmBF,EAAAA,GAAAA,IAAH,sCAGhBG,EAAkBH,EAAAA,GAAAA,IAAH,sCAGfI,EAAgBJ,EAAAA,GAAAA,IAAF,qG,mBCyD3B,EAhEqB,WAAO,IAAD,IACjBK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRC,EAAiBR,EAClB,GAAE,CAACA,IAEJ,IAAMQ,EAAgB,mCAAG,WAAMR,GAAN,iGAEDS,EAAAA,EAAAA,IAAgBT,GAFf,UAEfU,EAFe,8BAKnBC,EAAAA,OAAAA,QAAe,+CALI,0BAQrBP,EAAaM,GARQ,kDAUrBC,EAAAA,OAAAA,QAAe,2CAVM,0DAAH,sDAcdC,EACNT,EADMS,MAAOC,EACbV,EADaU,aAAcC,EAC3BX,EAD2BW,aAAcC,EACzCZ,EADyCY,SAAUC,EACnDb,EADmDa,OAAQC,EAC3Dd,EAD2Dc,YAG7D,OACE,4BACE,UAACvB,EAAD,CAAYwB,GAAE,oBAAEb,EAASc,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAAxC,WACE,SAAC,MAAD,IADF,eAGA,UAACvB,EAAD,YACE,gBACEwB,IACEJ,EAAW,yCAC2BA,GAClC,+EAENK,IAAKV,EACLW,MAAM,SAER,UAACzB,EAAD,YACE,0BACGc,EADH,YACYC,QADZ,IACYA,OADZ,EACYA,EAAcW,MAAM,EAAG,GADnC,QAGA,wCAAkD,GAAlCC,OAAOX,GAAcY,QAAQ,GAA7C,QACA,sCACA,uBAAIX,KACJ,oCACA,8BAAIC,QAAJ,IAAIA,OAAJ,EAAIA,EAAQW,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAG9C,UAAC/B,EAAD,YACE,oDACF,SAACL,EAAD,CAAYwB,GAAG,OAAOC,MAAOd,EAASc,MAAtC,mBACE,SAACzB,EAAD,CAAYwB,GAAG,UAAUC,MAAOd,EAASc,MAAzC,yBAEF,SAAC,EAAAY,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C,kMC5EKC,EAAU,mCAChBC,EAAAA,GAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAW,mCAAG,2GAAOC,EAAP,+BAAkB,GAAIC,EAAtB,+BAAoC,GAApC,kBAEOH,EAAAA,GAAAA,IAAA,UAClBE,EADkB,oBACEH,EADF,YACaI,IAHpB,cAEVC,EAFU,yBAKTA,EAASC,MALA,gCAOhB,IAAIC,MAAM,aAPM,yDAAH,qDAWJC,EAAc,WAEzB,OAAON,EADU,sBAElB,EAEYO,EAAiB,SAAAC,GAC5B,IACMN,EAAW,iBAAaM,GAC9B,OAAOR,EAFO,eAEeE,EAC9B,EAEY7B,EAAkB,SAAAT,GAC7B,IAAMqC,EAAQ,gBAAYrC,GAC1B,OAAOoC,EAAYC,EACpB,EAEYQ,EAAe,SAAA7C,GAC1B,IAAMqC,EAAQ,gBAAYrC,EAAZ,YACd,OAAOoC,EAAYC,EACpB,EAEYS,EAAkB,SAAA9C,GAC7B,IAAMqC,EAAQ,gBAAYrC,EAAZ,YACd,OAAOoC,EAAYC,EACpB,C","sources":["pages/MovieDetails.styled.jsx","pages/MovieDetails.jsx","services/Api.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from 'react-router-dom';\n\nexport const LinkStyled = styled(NavLink)`\ndisplay: block;\npadding: 8px 16px;\nborder-radius: 4px;\ntext-decoration: none;\ncolor: black;\nfont-size: 20px;\nfont-weight: 500;\n\n&.active {\n  color: white;\n  background-color: orangered;\n}`\n\nexport const MovieInformation = styled.div`\ndisplay: flex;`\n\nexport const MovieDecription = styled.div`\npadding: 20px;`\n\nexport const AddInformation =styled.div`\npadding: 10px;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;`\n\n\n","import { useEffect, Suspense } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport { useState } from 'react';\nimport { RiReplyFill } from 'react-icons/ri';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Loader } from '../components/Loader/Loader';\nimport {\n  MovieInformation,\n  MovieDecription,\n  LinkStyled,\n  AddInformation,\n} from './MovieDetails.styled';\n\nimport { getMovieDetails } from '../services/Api';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movieData, setMovieData] = useState({});\n  const location = useLocation();\n\n  useEffect(() => {\n    loadMovieDetails(movieId);\n  }, [movieId]);\n\n  const loadMovieDetails = async movieId => {\n    try {\n      const movie = await getMovieDetails(movieId);\n\n      if (!movie) {\n        Notify.failure('Sorry, there are no details for this movie.');\n        return;\n      }\n      setMovieData(movie);\n    } catch (error) {\n      Notify.failure('Something went wrong. Please try again.');\n    }\n  };\n\n  const { title, release_date, vote_average, overview, genres, poster_path } =\n    movieData;\n\n  return (\n    <div>\n      <LinkStyled to={location.state?.from ?? '/'}>\n        <RiReplyFill /> Go back\n      </LinkStyled>\n      <MovieInformation>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : 'https://upload.wikimedia.org/wikipedia/commons/f/fc/No_picture_available.png'\n          }\n          alt={title}\n          width=\"320\"\n        ></img>\n        <MovieDecription>\n          <h2>\n            {title} ({release_date?.slice(0, 4)})\n          </h2>\n          <p>User score: {Number(vote_average).toFixed(1) * 10}%</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres?.map(genre => genre.name).join(', ')}</p>\n        </MovieDecription>\n      </MovieInformation>\n      <AddInformation>\n        <h3>Additional information</h3>\n      <LinkStyled to=\"cast\" state={location.state}>Cast</LinkStyled>\n        <LinkStyled to=\"reviews\" state={location.state}>Reviews</LinkStyled>\n      </AddInformation>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = '8d195799489102b1191d845f2ff9f57d';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst fetchMovies = async (pathName = '', queryString = '') => {\n  try {\n    const response = await axios.get(\n      `${pathName}?api_key=${API_KEY}&${queryString}`\n    );\n    return response.data;\n  } catch (error) {\n    new Error('Not Found');\n  }\n};\n\nexport const getTrending = () => {\n  const pathName = '/trending/movie/day';\n  return fetchMovies(pathName);\n};\n\nexport const getMovieSearch = query => {\n  const pathName = `search/movie`;\n  const queryString = `&query=${query}`;\n  return fetchMovies(pathName, queryString);\n};\n\nexport const getMovieDetails = movieId => {\n  const pathName = `movie/${movieId}`;\n  return fetchMovies(pathName);\n};\n\nexport const getMovieCast = movieId => {\n  const pathName = `movie/${movieId}/credits`;\n  return fetchMovies(pathName);\n};\n\nexport const getMovieReviews = movieId => {\n  const pathName = `movie/${movieId}/reviews`;\n  return fetchMovies(pathName);\n};\n"],"names":["LinkStyled","styled","NavLink","MovieInformation","MovieDecription","AddInformation","movieId","useParams","useState","movieData","setMovieData","location","useLocation","useEffect","loadMovieDetails","getMovieDetails","movie","Notify","title","release_date","vote_average","overview","genres","poster_path","to","state","from","src","alt","width","slice","Number","toFixed","map","genre","name","join","Suspense","fallback","Loader","API_KEY","axios","fetchMovies","pathName","queryString","response","data","Error","getTrending","getMovieSearch","query","getMovieCast","getMovieReviews"],"sourceRoot":""}